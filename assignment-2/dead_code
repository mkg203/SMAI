    def three_opt(self, tour):
        """
        Perform 3-opt optimization on the given tour.
        
        :param tour: List representing the tour
        :return: Optimized tour
        """
        N = len(tour)
        improved = True
        iteration = 0
        # initial_cost = self.calculate_tour_cost(tour)
        # logger.info(f"Initial tour cost: {initial_cost}")

        while improved and iteration < N-1:
            iteration += 1
            improved = False
            for i in range(N):
                for j in range(i + 2, N - 1):
                    for k in range(j + 2, N + (i > 0)):
                        if k == N:
                            k = 0  # allow reversing segments that include the first city
                        X1, X2 = tour[i], tour[(i + 1) % N]
                        Y1, Y2 = tour[j], tour[(j + 1) % N]
                        Z1, Z2 = tour[k], tour[(k + 1) % N]
                        
                        best_gain = 0
                        best_case = -1
                        for opt_case in range(8):  # 0 to 7
                            gain = self.gain_from_3_opt(X1, X2, Y1, Y2, Z1, Z2, opt_case)
                            if gain > best_gain:
                                best_gain = gain
                                best_case = opt_case
                        
                        if best_gain > 0:
                            self.make_3_opt_move(tour, i, j, k, best_case)
                            improved = True
                            # current_cost = self.calculate_tour_cost(tour)
                            # logger.info(f"Iteration {iteration}: Applied case {best_case}, new cost: {current_cost}")
                            break
                        
                    if improved:
                        break
                if improved:
                    break
            
            # if not improved:
            #     logger.info(f"No improvement found in iteration {iteration}")
        
        # final_cost = self.calculate_tour_cost(tour)
        # logger.info(f"Final tour cost: {final_cost}")
        return tour

    def gain_from_3_opt(self, X1, X2, Y1, Y2, Z1, Z2, opt_case):
        """
        Calculate the gain from a 3-opt move.
        
        :param X1, X2, Y1, Y2, Z1, Z2: City indices
        :param opt_case: The type of 3-opt reconnection (0-7)
        :return: The length gain from the 3-opt move
        """
        match opt_case:
            case 0:
                return 0  # original tour remains without changes
            case 1:
                del_length = self.weights.get((X1, X2), 0) + self.weights.get((Z1, Z2), 0)
                add_length = self.weights.get((X1, Z1), 0) + self.weights.get((X2, Z2), 0)
            case 2:
                del_length = self.weights.get((Y1, Y2), 0) + self.weights.get((Z1, Z2), 0)
                add_length = self.weights.get((Y1, Z1), 0) + self.weights.get((Y2, Z2), 0)
            case 3:
                del_length = self.weights.get((X1, X2), 0) + self.weights.get((Y1, Y2), 0)
                add_length = self.weights.get((X1, Y1), 0) + self.weights.get((X2, Y2), 0)
            case 4 | 5 | 6 | 7:
                del_length = self.weights.get((X1, X2), 0) + self.weights.get((Y1, Y2), 0) + self.weights.get((Z1, Z2), 0)
                match opt_case:
                    case 4:
                        add_length = self.weights.get((X1, Y1), 0) + self.weights.get((X2, Z1), 0) + self.weights.get((Y2, Z2), 0)
                    case 5:
                        add_length = self.weights.get((X1, Z1), 0) + self.weights.get((Y2, X2), 0) + self.weights.get((Y1, Z2), 0)
                    case 6:
                        add_length = self.weights.get((X1, Y2), 0) + self.weights.get((Z1, Y1), 0) + self.weights.get((X2, Z2), 0)
                    case 7:
                        add_length = self.weights.get((X1, Y2), 0) + self.weights.get((Z1, X2), 0) + self.weights.get((Y1, Z2), 0)

        return del_length - add_length

    def make_3_opt_move(self, tour, i, j, k, opt_case):
        """
        Perform the given 3-opt move on the tour array representation of the tour.
        
        :param tour: List representing the tour
        :param i, j, k: Indices for the 3-opt move
        :param opt_case: The type of 3-opt reconnection (0-7)
        """
        N = len(tour)

        match opt_case:
            case 0:
                return  # nothing to do, the tour remains without changes
            case 1:
                self.reverse_segment(tour, (i + 1) % N, k)
            case 2:
                self.reverse_segment(tour, (j + 1) % N, k)
            case 3:
                self.reverse_segment(tour, (i + 1) % N, j)
            case 4:
                self.reverse_segment(tour, (i + 1) % N, j)
                self.reverse_segment(tour, (j + 1) % N, k)
            case 5:
                self.reverse_segment(tour, (i + 1) % N, j)
                self.reverse_segment(tour, j, k)
            case 6:
                self.reverse_segment(tour, (j + 1) % N, k)
                self.reverse_segment(tour, i, j)
            case 7:
                self.reverse_segment(tour, (i + 1) % N, k)
